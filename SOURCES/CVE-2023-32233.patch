From ad37f3981d1b794f413c57d69911310b64bf1b4e Mon Sep 17 00:00:00 2001
From: Ryan Sullivan <rysulliv@redhat.com>
Date: Mon, 5 Jun 2023 10:09:49 -0400
Subject: [KPATCH CVE-2023-32233] kpatch fixes for CVE-2023-32233

Kernels:
5.14.0-284.11.1.el9_2


Kpatch-MR: https://gitlab.com/redhat/prdsc/rhel/src/kpatch/rhel-9/-/merge_requests/37
Approved-by: Yannick Cote (@ycote1)
Changes since last build:
arches: x86_64 ppc64le
core.o: changed function: perf_group_detach
nf_tables_api.o: changed function: nf_tables_deactivate_set
nf_tables_api.o: new function: nf_tables_activate_set
nft_dynset.o: changed function: nft_dynset_activate
nft_lookup.o: changed function: nft_lookup_activate
nft_objref.o: changed function: nft_objref_map_activate
---------------------------

Modifications:
Removes prototype definition of nf_tables_activate_set() from
nf_tables.h and moves it into the affected files above when it is
called, also adds the optimization attribute
"-fno-optimize-sibling-calls" to the nf_tables_deactivate_set function

commit fb671b405818f95e3cfbdcf723800179b4329767
Author: Florian Westphal <fwestpha@redhat.com>
Date:   Wed May 10 13:12:28 2023 +0200

    netfilter: nf_tables: deactivate anonymous set from preparation phase

    Bugzilla: https://bugzilla.redhat.com/2196134
    CVE: CVE-2023-32233
    Y-Commit: a3788ef4afc79bb8640be338d58b1ba67deca236

    O-Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=2196135
    Upstream Status: commit c1592a89942e9
    O-CVE: CVE-2023-32233

    commit c1592a89942e9678f7d9c8030efa777c0d57edab
    Author: Pablo Neira Ayuso <pablo@netfilter.org>
    Date:   Tue May 2 10:25:24 2023 +0200

        netfilter: nf_tables: deactivate anonymous set from preparation phase

        Toggle deleted anonymous sets as inactive in the next generation, so
        users cannot perform any update on it. Clear the generation bitmask
        in case the transaction is aborted.

        The following KASAN splat shows a set element deletion for a bound
        anonymous set that has been already removed in the same transaction.

        [   64.921510] ==================================================================
        [   64.923123] BUG: KASAN: wild-memory-access in nf_tables_commit+0xa24/0x1490 [nf_tables]
        [   64.924745] Write of size 8 at addr dead000000000122 by task test/890
        [   64.927903] CPU: 3 PID: 890 Comm: test Not tainted 6.3.0+ #253
        [   64.931120] Call Trace:
        [   64.932699]  <TASK>
        [   64.934292]  dump_stack_lvl+0x33/0x50
        [   64.935908]  ? nf_tables_commit+0xa24/0x1490 [nf_tables]
        [   64.937551]  kasan_report+0xda/0x120
        [   64.939186]  ? nf_tables_commit+0xa24/0x1490 [nf_tables]
        [   64.940814]  nf_tables_commit+0xa24/0x1490 [nf_tables]
        [   64.942452]  ? __kasan_slab_alloc+0x2d/0x60
        [   64.944070]  ? nf_tables_setelem_notify+0x190/0x190 [nf_tables]
        [   64.945710]  ? kasan_set_track+0x21/0x30
        [   64.947323]  nfnetlink_rcv_batch+0x709/0xd90 [nfnetlink]
        [   64.948898]  ? nfnetlink_rcv_msg+0x480/0x480 [nfnetlink]

        Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

    Signed-off-by: Florian Westphal <fwestpha@redhat.com>
    Signed-off-by: Herton R. Krzesinski <herton@redhat.com>

Signed-off-by: Ryan Sullivan <rysulliv@redhat.com>
---
 net/netfilter/nf_tables_api.c | 12 ++++++++++++
 net/netfilter/nft_dynset.c    |  3 ++-
 net/netfilter/nft_lookup.c    |  3 ++-
 net/netfilter/nft_objref.c    |  3 ++-
 4 files changed, 18 insertions(+), 3 deletions(-)

diff --git a/net/netfilter/nf_tables_api.c b/net/netfilter/nf_tables_api.c
index 39b083fc11bf..034f9761ca83 100644
--- a/net/netfilter/nf_tables_api.c
+++ b/net/netfilter/nf_tables_api.c
@@ -4787,12 +4787,24 @@ static void nf_tables_unbind_set(const struct nft_ctx *ctx, struct nft_set *set,
 	}
 }
 
+void nf_tables_activate_set(const struct nft_ctx *ctx, struct nft_set *set)
+{
+	if (nft_set_is_anonymous(set))
+		nft_clear(ctx->net, set);
+
+	set->use++;
+}
+
+__attribute__((optimize("-fno-optimize-sibling-calls")))
 void nf_tables_deactivate_set(const struct nft_ctx *ctx, struct nft_set *set,
 			      struct nft_set_binding *binding,
 			      enum nft_trans_phase phase)
 {
 	switch (phase) {
 	case NFT_TRANS_PREPARE:
+		if (nft_set_is_anonymous(set))
+			nft_deactivate_next(ctx->net, set);
+
 		set->use--;
 		return;
 	case NFT_TRANS_ABORT:
diff --git a/net/netfilter/nft_dynset.c b/net/netfilter/nft_dynset.c
index 87f3af4645d9..389790967d68 100644
--- a/net/netfilter/nft_dynset.c
+++ b/net/netfilter/nft_dynset.c
@@ -337,12 +337,13 @@ static void nft_dynset_deactivate(const struct nft_ctx *ctx,
 	nf_tables_deactivate_set(ctx, priv->set, &priv->binding, phase);
 }
 
+void nf_tables_activate_set(const struct nft_ctx *ctx, struct nft_set *set); //CVE-2023-32233
 static void nft_dynset_activate(const struct nft_ctx *ctx,
 				const struct nft_expr *expr)
 {
 	struct nft_dynset *priv = nft_expr_priv(expr);
 
-	priv->set->use++;
+	nf_tables_activate_set(ctx, priv->set);
 }
 
 static void nft_dynset_destroy(const struct nft_ctx *ctx,
diff --git a/net/netfilter/nft_lookup.c b/net/netfilter/nft_lookup.c
index 90becbf5bff3..5a3feddd8f1f 100644
--- a/net/netfilter/nft_lookup.c
+++ b/net/netfilter/nft_lookup.c
@@ -162,12 +162,13 @@ static void nft_lookup_deactivate(const struct nft_ctx *ctx,
 	nf_tables_deactivate_set(ctx, priv->set, &priv->binding, phase);
 }
 
+void nf_tables_activate_set(const struct nft_ctx *ctx, struct nft_set *set); //CVE-2023-32233
 static void nft_lookup_activate(const struct nft_ctx *ctx,
 				const struct nft_expr *expr)
 {
 	struct nft_lookup *priv = nft_expr_priv(expr);
 
-	priv->set->use++;
+	nf_tables_activate_set(ctx, priv->set);
 }
 
 static void nft_lookup_destroy(const struct nft_ctx *ctx,
diff --git a/net/netfilter/nft_objref.c b/net/netfilter/nft_objref.c
index 94b2327e71dc..0bbd673226b6 100644
--- a/net/netfilter/nft_objref.c
+++ b/net/netfilter/nft_objref.c
@@ -178,12 +178,13 @@ static void nft_objref_map_deactivate(const struct nft_ctx *ctx,
 	nf_tables_deactivate_set(ctx, priv->set, &priv->binding, phase);
 }
 
+void nf_tables_activate_set(const struct nft_ctx *ctx, struct nft_set *set); //CVE-2023-32233
 static void nft_objref_map_activate(const struct nft_ctx *ctx,
 				    const struct nft_expr *expr)
 {
 	struct nft_objref_map *priv = nft_expr_priv(expr);
 
-	priv->set->use++;
+	nf_tables_activate_set(ctx, priv->set);
 }
 
 static void nft_objref_map_destroy(const struct nft_ctx *ctx,
-- 
2.39.2


